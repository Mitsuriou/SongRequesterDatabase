-- Force UTF-8
SET client_encoding = UTF8;

-- Database
DROP DATABASE song_requester;

CREATE DATABASE song_requester
WITH OWNER = athena
ENCODING = 'UTF8'
LC_COLLATE = 'fr-FR.utf8'
LC_CTYPE = 'fr-FR.utf8'
TEMPLATE = template0;

-- Connect to the created database
\c song_requester athena;

ALTER DATABASE song_requester SET client_encoding = UTF8;

-- Force UTF-8 once again
SET client_encoding = UTF8;

-- Schema
CREATE SCHEMA sr;

-- GENDER_ENUM
CREATE TYPE GENDER_ENUM AS ENUM(
    'unspecified',
    'feminine',
    'masculine',
    'hidden_publicly'
);

CREATE EXTENSION CITEXT;

-- "USER" TABLE - DECLARATION
CREATE TABLE sr.user(
    id SERIAL PRIMARY KEY,
    email CITEXT NOT NULL UNIQUE,
    nickname CITEXT NOT NULL UNIQUE,
    name TEXT,
    show_name_publicly BOOLEAN DEFAULT FALSE,
    surname TEXT,
    show_surname_publicly BOOLEAN DEFAULT FALSE,
    country TEXT,
    show_country_publicly BOOLEAN DEFAULT FALSE,
    gender GENDER_ENUM DEFAULT 'unspecified',
    show_gender_publicly BOOLEAN DEFAULT FALSE,
    profile_picture TEXT,
    show_profile_picture_publicly BOOLEAN DEFAULT FALSE,
    profile_banner TEXT,
    show_profile_banner_publicly BOOLEAN DEFAULT FALSE,
    creation TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    -- password
    -- backup email address
    -- backup phone number
    -- connection status
    -- last login date
);

-- "USER" TABLE - DUMMY DATA
INSERT
    INTO sr.user(email, nickname, name, show_name_publicly, surname, show_surname_publicly, country, gender)
    VALUES('rosé&@yg-ent.kr','Rosé', 'Roseanne', TRUE, 'Park', TRUE, 'kr', 'feminine');

INSERT
    INTO sr.user(email, nickname, name, surname)
    VALUES('문.별@test.mail.com', 'Moonstar', '문', '별이');

INSERT
    INTO sr.user(email, nickname)
    VALUES('jvna@redlightmanagement.com', 'JVNA');

SELECT * FROM sr.user;

-- "PUBLIC_PROFILE" VIEW
CREATE VIEW PUBLIC_PROFILE
    AS SELECT
        id,
        nickname,
        CASE WHEN show_name_publicly = TRUE THEN name ELSE '' END AS name, -- hide the name if must not be shown publicly
        show_name_publicly,
        CASE WHEN show_surname_publicly = TRUE THEN surname ELSE '' END AS surname, -- hide the surname if must not be shown publicly
        show_surname_publicly,
        CASE WHEN show_country_publicly = TRUE THEN country ELSE '' END AS country, -- hide the country if must not be shown publicly
        show_country_publicly,
        CASE WHEN show_gender_publicly = TRUE THEN gender ELSE 'hidden_publicly' END AS gender, -- hide the gender if must not be shown publicly
        show_gender_publicly,
        CASE WHEN show_profile_picture_publicly = TRUE THEN profile_picture ELSE '' END AS profile_picture, -- hide the profile_picture if must not be shown publicly
        show_profile_picture_publicly,
        CASE WHEN show_profile_banner_publicly = TRUE THEN profile_banner ELSE '' END AS profile_banner, -- hide the profile_banner if must not be shown publicly
        show_profile_banner_publicly
    FROM sr.user;

SELECT * FROM PUBLIC_PROFILE;
SELECT * FROM PUBLIC_PROFILE WHERE nickname = 'Rosé';
SELECT * FROM PUBLIC_PROFILE WHERE id = 3;

-- POST_VIEW_STATUS_ENUM
CREATE TYPE sr.POST_VIEW_STATUS_ENUM AS ENUM(
    'posted',
    'viewed',
    'marked_as_unread',
    'hidden',
    'deleted'
);

-- VOTE_ENUM
CREATE TYPE sr.VOTE_ENUM AS ENUM(
    'negative',
    'neutral',
    'positive'
);

-- "REQUEST" TABLE
CREATE TABLE sr.request(
    id SERIAL PRIMARY KEY,
    request_from INT NOT NULL,
    request_to INT NOT NULL,
    view_status sr.POST_VIEW_STATUS_ENUM DEFAULT 'posted',
    vote_status sr.VOTE_ENUM DEFAULT 'neutral',
    creation_date DATE NOT NULL,
    url TEXT,
    comment TEXT,
    CONSTRAINT fk_request_from FOREIGN KEY(request_from) REFERENCES sr.user(id),
    CONSTRAINT fk_request_to FOREIGN KEY(request_to) REFERENCES sr.user(id)
);